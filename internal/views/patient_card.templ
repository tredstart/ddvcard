package views

import (
	"ddcard/internal/models"
	"fmt"
	"log"
)

func ToothScript() string {
	return fmt.Sprintf("on mouseenter toggle [@stroke-width=3] on me until mouseleave")
}

templ BackTop(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 48 12"
		width="48"
		height="12"
		fill={ getFillTooth(tooth, models.Top) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Top, "back") }
	>
		<path
			d="
            M 0 0
            h 48 
            l -12 12
            h -24 z
            "
		></path>
	</svg>
}

templ BackRight(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 12 48"
		width="12"
		height="48"
		fill={ getFillTooth(tooth, models.Right) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Right, "back") }
	>
		<path
			d="
            M 12 0
            v 48 
            l -12 -12
            v -24 z
            "
		></path>
	</svg>
}

templ BackBottom(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 48 12"
		width="48"
		height="12"
		fill={ getFillTooth(tooth, models.Bottom) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Bottom, "back") }
	>
		<path
			d="
            M 0 12
            h 48
            l -12 -12
            h -24 z
            "
		></path>
	</svg>
}

templ BackLeft(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 12 48"
		width="12"
		height="48"
		fill={ getFillTooth(tooth, models.Left) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Left, "back") }
	>
		<path
			d="
            M 0 0
            v 48 
            l 12 -12 
            v -24 z
            "
		></path>
	</svg>
}

func getToothPost(pid, tid string) string {
	return fmt.Sprintf("/patient/%s/tooth/%s", pid, tid)
}

func getFillTooth(tooth models.Tooth, side int) string {
	if tooth.Id == "" {
		return "none"
	} else {
		log.Println(tooth, side)
		switch side {
		case models.Top:
			return ToothStatus[tooth.T]
		case models.Right:
			return ToothStatus[tooth.R]
		case models.Bottom:
			return ToothStatus[tooth.B]
		case models.Left:
			return ToothStatus[tooth.L]
		case models.Center:
			return ToothStatus[tooth.Center]
		default:
			return "none"
		}
	}
}

func toothOnClick(num, side int, tooth_type string) string {
	return fmt.Sprintf(
		`on click set params to {"num": %d, "side": %d, "proc": $fillValue, "type": "%s"} then 
            put params as JSON into @hx-vals then send sendEm to me
            on mouseenter toggle [@stroke-width=3] on me until mouseleave`, num, side, tooth_type)
}

templ BackCenter(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 24 24"
		width="24"
		height="24"
		fill={ getFillTooth(tooth, models.Center) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Center, "back") }
	>
		<path
			d="
            M 0 0
            h 24 
            v 24
            h -24 z
            "
		></path>
	</svg>
}

templ FrontTop(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 48 24"
		width="48px"
		height="24px"
		fill={ getFillTooth(tooth, models.Top) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Top, "front") }
	>
		<path
			d="
            M 0 0
            h 48
            l -12 24
            h -24 z
            "
		></path>
	</svg>
}

templ FrontLeft(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 12 48"
		width="12"
		height="48"
		fill={ getFillTooth(tooth, models.Left) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Left, "front") }
	>
		<path
			d="
            M 0 0
            v 48
            l 12 -24 z
            "
		></path>
	</svg>
}

templ FrontBottom(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 48 24"
		width="48"
		height="24"
		fill={ getFillTooth(tooth, models.Bottom) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Bottom, "front") }
	>
		<path
			d="
            M 0 24
            h 48
            l -12 -24
            h -24 z
            "
		></path>
	</svg>
}

templ FrontRight(pid string, tooth models.Tooth, num int) {
	<svg
		viewBox="0 0 12 48"
		width="12"
		height="48"
		fill={ getFillTooth(tooth, models.Right) }
		stroke="black"
		hx-trigger="sendEm"
		hx-post={ getToothPost(pid, tooth.Id) }
		hx-swap="outerHTML"
		_={ toothOnClick(num, models.Right, "front") }
	>
		<path
			d="
            M 12 0
            v 48
            l -12 -24 z
            "
		></path>
	</svg>
}

templ RootCanalUp() {
	<svg
		viewBox="0 0 16 72"
		fill="none"
		stroke="black"
		width="16"
		height="72"
		_={ ToothScript() }
	>
		<path
			d="
            M 0 72
            l 3 -60
            a 5 50 0 0 1 8 30
            l 3 60"
		></path>
	</svg>
}

templ RootCanalDown() {
	<svg
		viewBox="0 0 16 72"
		fill="none"
		stroke="black"
		width="16"
		height="72"
		_={ ToothScript() }
	>
		<path
			d="
            M 0 0
            l 3 60
            a 5 50 0 0 0 8 -30
            l 3 -60"
		></path>
	</svg>
}

templ FrontTooth(pid string, tooth models.Tooth, num int) {
	<div class="flex flex-col items-center text-center">
		if num < 30 || (num > 50 && num < 70) {
			<div>
				@RootCanalUp()
			</div>
		} else {
			<div>
				<p>
					{ fmt.Sprint(num) }
				</p>
			</div>
		}
		<div class="relative w-12 h-12">
			<div class="absolute">
				@FrontTop(pid, tooth, num)
			</div>
			<div class="absolute">
				@FrontLeft(pid, tooth, num)
			</div>
			<div class="absolute left-9">
				@FrontRight(pid, tooth, num)
			</div>
			<div class="absolute top-6">
				@FrontBottom(pid, tooth, num)
			</div>
		</div>
		if num < 30 || (num > 50 && num < 70) {
			<div>
				<p>
					{ fmt.Sprint(num) }
				</p>
			</div>
		} else {
			@RootCanalDown()
		}
	</div>
}

func getClassForBack(num int) int {
	switch true {
	case num == 17 || num == 16 || num == 26 || num == 27:
		return 3
	case num%10 == 6 || num%10 == 7 || num%10 == 8:
		return 2
	default:
		return 1
	}
}

templ BackTooth(num int, tooth models.Tooth, pid string) {
	<div class="flex flex-col items-center text-center">
		if num < 30 || (num > 50 && num < 70) {
			<div class="flex flex-row">
				for range getClassForBack(num) {
					@RootCanalUp()
				}
			</div>
		} else {
			<div>
				<p>
					{ fmt.Sprint(num) }
				</p>
			</div>
		}
		<div class="relative w-12 h-12">
			<div class="absolute">
				@BackLeft(pid, tooth, num)
			</div>
			<div class="absolute">
				@BackTop(pid, tooth, num)
			</div>
			<div class="absolute left-9">
				@BackRight(pid, tooth, num)
			</div>
			<div class="absolute top-3 left-3">
				@BackCenter(pid, tooth, num)
			</div>
			<div class="absolute top-9">
				@BackBottom(pid, tooth, num)
			</div>
		</div>
		if num < 30 || (num > 50 && num < 70) {
			<div>
				<p>
					{ fmt.Sprint(num) }
				</p>
			</div>
		} else {
			<div class="flex flex-row">
				for range getClassForBack(num) {
					@RootCanalDown()
				}
			</div>
		}
	</div>
}

templ KnownIllness(illness int) {
	<p>
		Papierosy :
		if illness & models.Papierosy != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Alergia :
		if illness & models.Alergia != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Nadciśnienie :
		if illness & models.Nadcisnienie != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Cukrzyca :
		if illness & models.Cukrzyca != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Choroby Tarczycy :
		if illness & models.ChorobyTarczycy != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Epilepsja :
		if illness & models.Epilepsja != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Skaza Krwotoczna :
		if illness & models.SkazaKrwotoczna != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Żółtaczka:
		if illness & models.Zoltaczka != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Gruźlica:
		if illness & models.Gruzlica != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		AIDS:
		if illness & models.AIDS != 0 {
			tak
		} else {
			nie
		}
	</p>
	<p>
		Choroby Odogniskowe:
		if illness & models.ChorobyOdogniskowe != 0 {
			tak
		} else {
			nie
		}
	</p>
}

var ToothStatus = map[int]string{
	0: "none",
	1: "#00ffff",
	2: "blue",
	3: "rose",
	4: "green",
}

var ToothStatusTranslated = map[int]string{
	0: "Cofnij",
	1: "Ząb niewyrżnięty",
	2: "Wypełnienie",
	3: "Korona",
	4: "Kamień",
}

var CanalStatus = map[int]string{
	0: "none",
	1: "#000fff",
	2: "#fff000",
	3: "#557700",
	4: "#990099",
}

var CanalStatusTranslated = map[int]string{
	0: "Cofnij",
	1: "Korzeń niewyrżnięty",
	2: "Korzeń Wypełnienie",
	3: "Korzeń",
	4: "What?",
}

func SetFillValue(key int, value string) string {
	return fmt.Sprintf("on click add .font-bold to me then set $%s to '%d'", value, key)
}

templ Legend() {
	<div class="border-2 border-black border-solid box-border w-[18.3rem] p-2">
		<h2>Legenda: </h2>
		<ul>
			<li>
				Ząb:
				<ul>
					for key := range ToothStatus {
						<li
							class="hover:font-bold hover:cursor-pointer"
							_={ SetFillValue(key, "fillValue") }
						>{ ToothStatusTranslated[key] }</li>
					}
				</ul>
			</li>
			<li>
				Kanał:
				<ul>
					for key := range CanalStatus {
						<li
							class="hover:font-bold hover:cursor-pointer"
							_={ SetFillValue(key, "canalValue") }
						>{ CanalStatusTranslated[key] }</li>
					}
				</ul>
			</li>
		</ul>
	</div>
}

templ PatientPage(patient models.Patient, teeth map[int]models.Tooth) {
	<!DOCTYPE HTML>
	<html>
		@head("Pacjent")
		<body hx-boost="true" class="font-mono" _="on load set $fillValue to '0' on load set $canalValue to '0'">
			@BackHome()
			<div class="flex flex-col w-[80%] gap-2 ml-[10%]">
				<div class="container p-10 flex flex-col">
					<p>
						{ patient.Name } { patient.Surname }
					</p>
					<p>
						{ patient.Birthdate }
					</p>
					<p>
						{ patient.Pesel }
					</p>
					<p>
						{ patient.Address }
					</p>
					<p>
						{ patient.Medicine }
					</p>
					@KnownIllness(patient.Illness)
				</div>
				<div class="flex flex-col gap-5">
					<div class="flex flex-row gap-2">
						<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
							for i := 18; i >= 14; i = i - 1 {
								@BackTooth(i, teeth[i], patient.Id)
							}
							for i := 13; i >= 11; i = i - 1 {
								@FrontTooth(patient.Id, teeth[i], i)
							}
						</div>
						<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
							for i := 21; i <= 23; i++ {
								@FrontTooth(patient.Id, teeth[i], i)
							}
							for i := 24; i <= 28; i++ {
								@BackTooth(i, teeth[i], patient.Id)
							}
						</div>
					</div>
					<div class="flex flex-row gap-2">
						<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
							for i := 48; i >= 44; i-- {
								@BackTooth(i, teeth[i], patient.Id)
							}
							for i := 43; i >= 41; i-- {
								@FrontTooth(patient.Id, teeth[i], i)
							}
						</div>
						<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
							for i := 31; i <= 33; i++ {
								@FrontTooth(patient.Id, teeth[i], i)
							}
							for i := 34; i <= 38; i++ {
								@BackTooth(i, teeth[i], patient.Id)
							}
						</div>
					</div>
				</div>
				<div class="flex flex-row gap-5 mt-5">
					<div class="flex flex-col gap-5">
						<div class="flex flex-row gap-2">
							<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
								@BackTooth(55, teeth[55], patient.Id)
								@BackTooth(54, teeth[54], patient.Id)
								for i := 53; i >= 51; i-- {
									@FrontTooth(patient.Id, teeth[i], i)
								}
							</div>
							<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
								for i := 61; i <= 63; i++ {
									@FrontTooth(patient.Id, teeth[i], i)
								}
								@BackTooth(64, teeth[64], patient.Id)
								@BackTooth(65, teeth[65], patient.Id)
							</div>
						</div>
						<div class="flex flex-row gap-2">
							<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
								@BackTooth(85, teeth[85], patient.Id)
								@BackTooth(84, teeth[84], patient.Id)
								for i := 83; i >= 81; i-- {
									@FrontTooth(patient.Id, teeth[i], i)
								}
							</div>
							<div class="flex gap-1 flex-row p-10 border-black border-2 border-solid">
								for i := 71; i <= 73; i++ {
									@FrontTooth(patient.Id, teeth[i], i)
								}
								@BackTooth(74, teeth[74], patient.Id)
								@BackTooth(75, teeth[75], patient.Id)
							</div>
						</div>
					</div>
					@Legend()
				</div>
			</div>
		</body>
	</html>
}
